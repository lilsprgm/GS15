from operator import index

import  numpy as np
import bitarray
import os
import random


#Step 1 add round key : Xor with a key the file 128 bits bloc/key
def split_binary_file(filename, chunk_size=16):  # 16 bytes = 128 bits
    """
    :param filename: The path to the binary file that needs to be split.
    :param chunk_size: The size of each chunk in bytes; defaults to 16 bytes.
    :return: A list of binary chunks read from the file, each with a maximum size of `chunk_size`.
    """
    chunks = []
    try:
        with open(filename, 'rb') as f:
            chunk = f.read(chunk_size)
            while chunk:
                chunks.append(chunk)
                chunk = f.read(chunk_size)
    except FileNotFoundError:
        print(f"Error: The file {filename} does not exist.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

    chunks[-1] += b'\x00' * (chunk_size - len(chunks[-1]))
    return chunks


def LFSR(length):
    """
    Generate a sequence of bits using a linear feedback shift register.

    :param length: The length of the sequence to generate.
    :return: A list of bits representing the key.
    """

    bits = [random.randint(0, 1) for i in range(length)] #at this step bits correspond to the seed, the initial state
    taps = [1,2,6]
    iteration = 10

    # Convert each character in the binary string to an integer and store in a list ([2:] to remove the 0b in that the bin fnction brings)
   # bits = [int(bit) for bit in bin(seed)[2:]]

    # Pad the list with zeros to the desired length
 #   bits = [0] * (length - len(bits)) + bits

    # Generate the sequence
    for i in range(iteration):
        # Compute the new bit
        new_bit = bits[-1]
        for tap in taps:
            new_bit ^= bits[-tap]

        # Shift the register
        bits = bits[1:] + [new_bit]

    return bits


def add_round_key(file_bits):
    """
    :param file_bits: The list of byte arrays to be processed where each byte is broken down into bits and XORed with a key bit sequence generated by a Linear Feedback Shift Register (LFSR).
    :return: The list of processed byte arrays with every bit encoded using XOR operation with LFSR generated key bits.
    """
    binary_encoded_file = []
    for blocks in file_bits:
        key = LFSR(128)
        i=0
        temp = []
        for byte in blocks:
            bits = [int(bit) for bit in bin(byte)[2:]]
            bits = [0] * (8 - len(bits)) + bits
            for bit in bits:
                temp.append(bit ^ key[i])
                i+=1
        binary_encoded_file.append(temp)

    return binary_encoded_file



#Step 2 Substitution 32 fois Sbox 4 bits : 4 Sbox 0-7 8-16 ....








