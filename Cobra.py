from operator import index
from sys import byteorder

import  numpy as np
import bitarray
import os
import random


#Step 1 add round key : Xor with a key the file 128 bits bloc/key
def split_binary_file(filename, chunk_size=16):  # 16 bytes = 128 bits
    """
    :param filename: The path to the binary file that needs to be split.
    :param chunk_size: The size of each chunk in bytes; defaults to 16 bytes.
    :return: A list of binary chunks read from the file, each with a maximum size of `chunk_size`.
    """
    chunks = []
    try:
        with open(filename, 'rb') as f:
            chunk = f.read(chunk_size)
            while chunk:
                chunks.append(bytearray(chunk))
                chunk = f.read(chunk_size)
    except FileNotFoundError:
        print(f"Error: The file {filename} does not exist.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

    chunks[-1] += b'\x00' * (chunk_size - len(chunks[-1]))
    return chunks

# Changer avec clé d'itération et pas LFSR
def LFSR():
    """
    Generate a sequence of bits using a linear feedback shift register.

    :param length: The length of the sequence to generate.
    :return: A list of bits representing the key.
    """

    length = 16 # on met des octet donc 16*8 = 128
    lfsr = bytearray(random.randbytes(length))#at this step bits correspond to the seed, the initial state
    taps = [1,2,6]
    iteration = 10

    # Convert each character in the binary string to an integer and store in a list ([2:] to remove the 0b in that the bin fnction brings)
   # bits = [int(bit) for bit in bin(seed)[2:]]

    # Pad the list with zeros to the desired length
 #   bits = [0] * (length - len(bits)) + bits

    # Generate the sequence
    """
    for i in range(iteration):
        # Compute the new bit
        new_bit = bits[-1]
        for tap in taps:
            new_bit ^= bits[-tap]

        # Shift the register
        bits = bits[1:] + [new_bit]

    
    """
    return lfsr

def add_round_key(file_bits):
    """
    :param file_bits: The list of byte arrays to be processed where each byte is broken down into bits and XORed with a key bit sequence generated by a Linear Feedback Shift Register (LFSR).
    :return: The list of processed byte arrays with every bit encoded using XOR operation with LFSR generated key bits.
    """
    for blocks in file_bits:
        key = LFSR()
        for i in range(len(blocks)):
            blocks[i] ^= key[i]

    return file_bits



#Step 2 Substitution 32 fois Sbox 4 bits : 4 Sbox 0-7 8-16 ....

# Step 1: Create the S-Boxes as random permutations of values 0 to 15
def generate_sbox(size):
    sbox = list(range(size))  # Possible values for 4 bits (0 to 15)
    random.shuffle(sbox)    # Shuffle the values for a permutation
    return sbox




sbox1 = generate_sbox(16)
sbox2 = generate_sbox(16)
sbox3 = generate_sbox(16)
sbox4 = generate_sbox(16)
permut_matrix = generate_sbox(8)
sboxes = [sbox1, sbox2, sbox3, sbox4]



# Step 2: Substitution function
def apply_sbox(block):
    """
    Apply substitution using the 4 S-Boxes on a 128-bit block
    (represented here as a list of 32 four-bit values)
    """
    for i in range(16):
        sbox = sboxes[i // 4]       # Choose the S-Box based on the index (0-7, 8-15, 16-23, 24-31)
        left_part = (block & 0xF0)>>4
        right_part = block & 0x0F# Take the lower 4 bits of each element
        substituted_value_left = sbox[left_part]
        substituted_value_right = sbox[right_part]
        block = substituted_value_left<<4 | substituted_value_right

    return block

def inv_sbox(block):
    for i in range(16):
        sbox = sboxes[i // 4]       # Choose the S-Box based on the index (0-7, 8-15, 16-23, 24-31)
        left_part = (block[i] & 0xF0)>>4
        right_part = block[i] & 0x0F# Take the lower 4 bits of each element
        inv_value_left = sbox.index(left_part)
        inv_value_right = sbox.index(right_part)
        block[i] = inv_value_left<<4 | inv_value_right

    return block



#3

def feistel_rere(input_blocks):
    for block in input_blocks:
        left = block[0:8]
        right = block[8:16]                     # A vérifier pour les indices

        for byte in left:
            byte = inv_bits_order(byte)
            byte = inv_mod257(byte+1)-1


def permutation(block):
    resultat = block
    for i in range(len(block)-1):
        resultat[i] = block[permut_matrix[i]]
    return resultat


def inv_mod257(x,mod = 257):
    """Calcule l'inverse multiplicatif de a modulo mod."""
    for i in range(mod):
        if (x * i) % mod == 1:
            return i
    return None  # Pas d'inverse multiplicatif si None

#Question : est ce qu'on utilise mod avec les entier ou dans GF256 avec le polynome x^8 +1

def inv_bits_order(byte):
    result = 0
    for i in range(8):
        result = (result << 1) | (byte & 1) #byte & 1 = LSB comme on décale premier LSB se trouve MSB a la fin
        byte >>= 1

    return result

def concat_blocks(input, blocksize):
    res = 0
    for block in input:
        res = res << blocksize
        res ^= block
    return res


# Pour toutes les fonction de décalage, la variable block size est en bit
def dec_circ_left(block, block_size, n):
    n = n%block_size
    rotated_block = (block << n) & ((1 << block_size) - 1) | (block >> (block_size - n)) # correspond a partie gauche | partie droite
    return rotated_block

def dec_circ_right(block, block_size, n):
    n = block_size - (n%block_size)
    rotated_block = (block << n) & ((1 << block_size) - 1) | (block >> (block_size - n))# correspond a partie gauche | partie droite
    print(bin(rotated_block))
    return rotated_block

def dec_lin_left(block, block_size, n):
    if n<block_size:
        rotated_block = (block << n) & ((1 << block_size) - 1)
        return rotated_block
    else:
        return 0


def trans_lineaire(input_blocks):

    res = []
    for block in input_blocks:
        a=int.from_bytes(block[0:4], byteorder='big')
        b=int.from_bytes(block[4:8], byteorder='big')
        c=int.from_bytes(block[8:12], byteorder='big')
        d=int.from_bytes(block[12:], byteorder='big')

        a = dec_circ_left(a, 32, 13)
        c= dec_circ_left(c, 32, 3)
        b = a ^ b ^ c
        d = d ^ c ^ dec_lin_left(a, 32, 3)
        b = dec_circ_left(b, 32, 1)
        d = dec_circ_left(d, 32, 7)
        a = a^b^d
        c = c ^ d ^ dec_lin_left(b, 32, 7)
        a = dec_circ_left(a, 32, 5)
        c = dec_circ_left(c, 32, 22)

        tmp = (a.to_bytes(4, byteorder='big') + b.to_bytes(4, byteorder='big')
               +c.to_bytes(4, byteorder='big') +d.to_bytes(4, byteorder='big'))

        res.append(tmp)

    return res


def inv_trans_lineaire(input_blocks):
    res = []
    for block in input_blocks:
        a = int.from_bytes(block[0:4], byteorder='big')
        b = int.from_bytes(block[4:8], byteorder='big')
        c = int.from_bytes(block[8:12], byteorder='big')
        d = int.from_bytes(block[12:], byteorder='big')

        c = dec_circ_right(c, 32, 22)
        a = dec_circ_right(a, 32, 5)
        c = c ^ d ^ dec_lin_left(b, 32, 7)
        a = a ^ b ^ d
        b = dec_circ_right(b, 32, 1)
        d = dec_circ_right(d, 32, 7)
        d = d ^ c ^ dec_lin_left(a, 32, 3)
        b = a ^ b ^ c
        a = dec_circ_right(a, 32, 13)
        c = dec_circ_right(c, 32, 3)

        tmp = a.to_bytes(4, byteorder='big') + b.to_bytes(4, byteorder='big') + c.to_bytes(4,
                                                                                           byteorder='big') + d.to_bytes(
            4, byteorder='big')

        res.append(tmp)

    return res


def key_scheduling(key):
    # key sous forme bytearray -> 32*8 = 256 bits
    tab_box = []
    phi = 0x16180339  # Constante binaire de longueur 4 octets
    key += b'\x00' * (32 - len(key))  # Compléter avec des 0 pour obtenir 32 octets

    # Extraction des premiers 8 blocs de 4 octets (32 bits)
    for i in range(0, 8):
        tab_box.append(int.from_bytes(key[i * 4:i * 4 + 4], byteorder='big'))

    # Génération des 124 autres clés
    for i in range(8, 132):
        tmp = (tab_box[i - 8] ^ tab_box[i - 5] ^ tab_box[i - 3] ^ tab_box[i - 1] ^ phi ^ i)
        tmp = dec_circ_left(tmp, 32, 11)  # Décalage circulaire à gauche
        tab_box.append(tmp)


    #Concatenation 4 blocs puis application des sbox
    tab_key = []
    for i in range (0, len(tab_key)):
        tab_key.append(concat_blocks(tab_key[i:i+4],32))
        i+=4

    for i in range(0, len(tab_key)):
        tab_key[i] = apply_sbox(tab_key[i])
        
    return tab_key



